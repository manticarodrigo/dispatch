scalar Date
scalar JSON

type Query {
  user: User
  seats: [Seat]
  seat(seatId: ID!, deviceId: ID, filters: TaskFilters): Seat
  places: [Place]
  place(placeId: ID!, filters: TaskFilters): Place
  tasks(filters: TaskFilters): [Task]
  task(taskId: ID!, seatId: ID, deviceId: ID): Task
  waypoint(waypointId: ID!): Waypoint
}

type Mutation {
  createUser(email: String!, password: String!): String!
  createSession(email: String!, password: String!): String!
  createSeat(name: String!): Seat!
  createDevice(seatId: ID!, deviceId: ID, info: JSON!): Device!
  createLocation(
    seatId: ID!
    deviceId: ID!
    position: LocationPosition!
    createdAt: String
  ): Location!
  createPlace(
    name: String!
    phone: String
    email: String
    description: String!
    lat: Float!
    lng: Float!
  ): Place!
  createTask(
    seatId: ID!
    startAt: String!
    placeIds: [ID]!
    route: JSON!
  ): Task!
  createArrival(waypointId: ID!, note: String): Waypoint
}

type User {
  id: ID!
  email: String!
  seats: [Seat]
  places: [Place]
}

type Device {
  id: ID!
  info: JSON!
  seat: Seat!
}

type Seat {
  id: ID!
  name: String!
  device: Device
  location: Location
  tasks: [Task]
}

type Location {
  id: ID!
  position: JSON!
  createdAt: String!
}

input LocationPosition {
  latitude: Float!
  longitude: Float!
  accuracy: Float
  altitude: Float
  altitudeAccuracy: Float
  heading: Float
  simulated: Boolean
  speed: Float
  timestamp: Float
}

type Place {
  id: ID!
  name: String!
  phone: String
  email: String
  description: String!
  lat: Float!
  lng: Float!
  tasks(filters: TaskFilters): [Task]
}

type Waypoint {
  id: ID!
  place: Place!
  order: Int!
  note: String
  arrivedAt: String
}

type Task {
  id: ID!
  seat: Seat!
  startAt: String!
  waypoints: [Waypoint]!
  route: JSON!
}

input TaskFilters {
  start: Date
  end: Date
  status: TaskStatus
}

enum TaskStatus {
  INCOMPLETE
  COMPLETE
}
