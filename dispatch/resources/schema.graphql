scalar Date
scalar JSON

type Query {
  user: User
  stripe: Stripe
}

type Mutation {
  register(email: String!, organization: String!): String
  login(email: String, phone: String): String
  loginConfirm(code: Int!): String
  createAgent(name: String!, phone: String!): Agent
  createLocation(position: LocationPosition!, createdAt: Date): Location
  createPlace(
    name: String!
    phone: String
    email: String
    description: String!
    lat: Float!
    lng: Float!
  ): Place
  createTask(agentId: ID!, startAt: Date!, placeIds: [ID]!, route: JSON!): Task
  createArrival(stopId: ID!, note: String): Stop
  createShipment(
    placeId: ID!
    size: JSON
    duration: Int
    windows: JSON
  ): Shipment
  createVehicle(name: String!, capacities: JSON): Vehicle
  createPlan(
    depotId: ID
    startAt: Date
    endAt: Date
    breaks: JSON
    vehicleIds: [ID]!
    shipmentIds: [ID]!
  ): Plan
  detachPaymentMethod(paymentMethodId: ID!): Boolean
}

type User {
  id: ID!
  email: String
  phone: String
  scope: String!
  organization: Organization
  agent: Agent
}

type Organization {
  id: ID!
  name: String!
  agents: [Agent]
  agent(agentId: ID!, filters: TaskFilters): Agent
  places: [Place]
  place(placeId: ID!, filters: TaskFilters): Place
  tasks(filters: TaskFilters): [Task]
  task(taskId: ID!): Task
  stop(stopId: ID!): Stop
  shipments: [Shipment]
  vehicles: [Vehicle]
  plans: [Plan]
}

type Agent {
  id: ID!
  name: String!
  location: Location
  places: [Place]
  place(placeId: ID!, filters: TaskFilters): Place
  tasks(filters: TaskFilters): [Task]
  task(taskId: ID!): Task
  stop(stopId: ID!): Stop
}

type Location {
  id: ID!
  position: JSON!
  createdAt: Date!
}

input LocationPosition {
  latitude: Float!
  longitude: Float!
  accuracy: Float
  altitude: Float
  altitudeAccuracy: Float
  heading: Float
  simulated: Boolean
  speed: Float
  timestamp: Float
}

type Place {
  id: ID!
  name: String!
  phone: String
  email: String
  description: String!
  lat: Float!
  lng: Float!
  tasks: [Task]
}

type Stop {
  id: ID!
  place: Place!
  order: Int!
  note: String
  arrivedAt: Date
}

type Task {
  id: ID!
  agent: Agent!
  startAt: Date!
  stops: [Stop]!
  route: JSON!
}

input TaskFilters {
  start: Date
  end: Date
  status: TaskStatus
}

enum TaskStatus {
  INCOMPLETE
  COMPLETE
}

type Stripe {
  setupIntent: JSON
  paymentMethods: JSON
}

type Shipment {
  id: ID!
  place: Place!
  size: JSON
  duration: Int
  windows: JSON
}

type Vehicle {
  id: ID!
  name: String!
  capacities: JSON
}

type Plan {
  id: ID!
  depot: Place
  startAt: Date!
  endAt: Date!
  breaks: JSON
  vehicles: [Vehicle]!
  shipments: [Shipment]!
}
