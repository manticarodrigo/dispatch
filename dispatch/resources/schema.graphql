scalar Date
scalar JSON

type Query {
  user: User
  seats: [Seat]
  seat(id: ID!): Seat
  addresses: [Address]
  address(id: ID!): Address
  routes(filters: RouteFilters): [Route]
  route(id: ID!): Route
  stop(id: ID!): Stop
}

type Mutation {
  createUser(email: String!, password: String!): String!
  loginUser(email: String!, password: String!): String!
  createSeat(name: String!): String!
  createAddress(
    name: String!
    description: String!
    phone: String
    email: String
    lat: Float!
    lng: Float!
  ): String!
  createRoute(
    seatId: ID!
    startAt: String!
    addressIds: [ID]!
    route: JSON!
  ): String!
  createLocation(
    seatId: ID!
    lat: Float!
    lng: Float!
    createdAt: String
  ): String!
  createStopArrival(stopId: ID!, note: String): Stop
}

type User {
  id: ID!
  email: String!
  seats: [Seat]
  addresses: [Address]
}

type Seat {
  id: ID!
  name: String!
  location: Location
  routes: [Route]
}

type Location {
  id: ID!
  lat: Float!
  lng: Float!
  createdAt: String!
}

type Address {
  id: ID!
  name: String!
  phone: String
  email: String
  description: String!
  lat: Float!
  lng: Float!
  routes: [Route]
}

type Stop {
  id: ID!
  address: Address!
  order: Int!
  note: String
  arrivedAt: String
}

type Route {
  id: ID!
  seat: Seat!
  startAt: String!
  stops: [Stop]!
  route: JSON!
}

input RouteFilters {
  start: Date
  end: Date
}
