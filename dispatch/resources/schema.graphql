scalar Date
scalar JSON

type Query {
  user: User
  stripe: Stripe
  agents: [Agent]
  agent(agentId: ID!, filters: TaskFilters): Agent
  places(agentId: ID, deviceId: ID): [Place]
  place(agentId: ID, deviceId: ID, placeId: ID!, filters: TaskFilters): Place
  tasks(agentId: ID, deviceId: ID, filters: TaskFilters): [Task]
  task(agentId: ID, deviceId: ID, taskId: ID!): Task
  stop(stopId: ID!): Stop
}

type Mutation {
  createUser(email: String!, password: String!, organization: String!): String!
  createSession(email: String!, password: String!): String!
  createAgent(name: String!, phone: String!): Agent!
  createDevice(agentId: ID!, deviceId: ID, info: JSON!): Device!
  createLocation(
    agentId: ID!
    deviceId: ID!
    position: LocationPosition!
    createdAt: Date
  ): Location!
  createPlace(
    agentId: ID
    deviceId: ID
    name: String!
    phone: String
    email: String
    description: String!
    lat: Float!
    lng: Float!
  ): Place!
  createTask(agentId: ID!, startAt: Date!, placeIds: [ID]!, route: JSON!): Task!
  createArrival(stopId: ID!, note: String): Stop
  detachPaymentMethod(paymentMethodId: ID!): Boolean
}

type User {
  id: ID!
  email: String!
  agents: [Agent]
  places: [Place]
  organization: Organization!
}

type Organization {
  id: ID!
  name: String!
}

type Stripe {
  setupIntent: JSON
  paymentMethods: JSON
}

type Device {
  id: ID!
  info: JSON!
  agent: Agent!
}

type Agent {
  id: ID!
  name: String!
  phone: String!
  device: Device
  location: Location
  tasks: [Task]
}

type Location {
  id: ID!
  position: JSON!
  createdAt: Date!
}

input LocationPosition {
  latitude: Float!
  longitude: Float!
  accuracy: Float
  altitude: Float
  altitudeAccuracy: Float
  heading: Float
  simulated: Boolean
  speed: Float
  timestamp: Float
}

type Place {
  id: ID!
  name: String!
  phone: String
  email: String
  description: String!
  lat: Float!
  lng: Float!
  tasks(agentId: ID, deviceId: ID, filters: TaskFilters): [Task]
}

type Stop {
  id: ID!
  place: Place!
  order: Int!
  note: String
  arrivedAt: Date
}

type Task {
  id: ID!
  agent: Agent!
  startAt: Date!
  stops: [Stop]!
  route: JSON!
}

input TaskFilters {
  start: Date
  end: Date
  status: TaskStatus
}

enum TaskStatus {
  INCOMPLETE
  COMPLETE
}
