generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  email         String?        @unique
  phone         String?        @unique
  password      String?
  organization  Organization?
  agent         Agent?
  verifications Verification[]
  sessions      Session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Organization {
  id        String     @id @unique @default(uuid())
  name      String
  admin     User       @relation(fields: [adminId], references: [id])
  adminId   String     @unique
  stripe    Stripe     @relation(fields: [stripeId], references: [id])
  stripeId  String     @unique
  agents    Agent[]
  places    Place[]
  tasks     Task[]
  shipments Shipment[]
  vehicles  Vehicle[]
  plans     Plan[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Stripe {
  id           String        @id @unique @default(uuid())
  customerId   String        @unique
  organization Organization?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Verification {
  id        String   @id @unique @default(uuid())
  code      Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Agent {
  id             String       @id @unique @default(uuid())
  name           String
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?      @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  locations      Location[]
  tasks          Task[]
  places         Place[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Location {
  id        String   @id @unique @default(uuid())
  position  Json
  agent     Agent    @relation(fields: [agentId], references: [id])
  agentId   String
  createdAt DateTime @default(now())
}

model Place {
  id             String       @id @unique @default(uuid())
  name           String
  phone          String?
  email          String?
  description    String
  lat            Float
  lng            Float
  agent          Agent?       @relation(fields: [agentId], references: [id])
  agentId        String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  stops          Stop[]
  shipments      Shipment[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  plans          Plan[]
}

model Task {
  id             String       @id @unique @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  agent          Agent        @relation(fields: [agentId], references: [id])
  agentId        String
  stops          Stop[]
  route          Json
  startAt        DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  plan           Plan?        @relation(fields: [planId], references: [id])
  planId         String?
  vehicle        Vehicle?     @relation(fields: [vehicleId], references: [id])
  vehicleId      String?
}

model Stop {
  id        String    @id @unique @default(uuid())
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    String
  place     Place     @relation(fields: [placeId], references: [id])
  placeId   String
  order     Int
  note      String?
  arrivedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  shipment  Shipment?
}

model Vehicle {
  id             String        @id @unique @default(uuid())
  name           String?
  capacities     Json?
  tasks          Task[]
  plans          PlanVehicle[]
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Shipment {
  id             String         @id @unique @default(uuid())
  size           Json?
  duration       Int?
  windows        Json
  place          Place          @relation(fields: [placeId], references: [id])
  placeId        String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  plans          PlanShipment[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  stop           Stop?          @relation(fields: [stopId], references: [id])
  stopId         String?        @unique
}

model Plan {
  id             String         @id @unique @default(uuid())
  startAt        DateTime
  endAt          DateTime
  breaks         Json?
  vehicles       PlanVehicle[]
  shipments      PlanShipment[]
  tasks          Task[]
  depot          Place?         @relation(fields: [depotId], references: [id])
  depotId        String?
  result         Json?
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model PlanVehicle {
  id        String   @id @unique @default(uuid())
  order     Int
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlanShipment {
  id         String   @id @unique @default(uuid())
  order      Int
  plan       Plan     @relation(fields: [planId], references: [id])
  planId     String
  shipment   Shipment @relation(fields: [shipmentId], references: [id])
  shipmentId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
