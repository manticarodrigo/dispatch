generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @unique @default(uuid())
  email        String        @unique
  password     String
  organization Organization?
  sessions     Session[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Organization {
  id        String   @id @unique @default(uuid())
  name      String
  admin     User     @relation(fields: [adminId], references: [id])
  adminId   String   @unique
  stripe    Stripe   @relation(fields: [stripeId], references: [id])
  stripeId  String   @unique
  agents    Agent[]
  places    Place[]
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stripe {
  id           String        @id @unique @default(uuid())
  customerId   String        @unique
  organization Organization?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Session {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Device {
  id        String   @id @unique @default(uuid())
  info      Json
  agent     Agent    @relation(fields: [agentId], references: [id])
  agentId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id             String       @id @unique @default(uuid())
  name           String
  phone          String?
  device         Device?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  location       Location?    @relation("AgentLocation", fields: [locationId], references: [id])
  locationId     String?      @unique
  locations      Location[]   @relation("AgentLocations")
  tasks          Task[]
  places         Place[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Location {
  id         String   @id @unique @default(uuid())
  position   Json
  currentFor Agent?   @relation("AgentLocation")
  agent      Agent    @relation("AgentLocations", fields: [agentId], references: [id])
  agentId    String
  createdAt  DateTime @default(now())
}

model Place {
  id             String       @id @unique @default(uuid())
  name           String
  phone          String?
  email          String?
  description    String
  lat            Float
  lng            Float
  agent          Agent?       @relation(fields: [agentId], references: [id])
  agentId        String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  stops          Stop[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Task {
  id             String       @id @unique @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  agent          Agent        @relation(fields: [agentId], references: [id])
  agentId        String
  stops          Stop[]
  route          Json
  startAt        DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Stop {
  id        String    @id @unique @default(uuid())
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    String
  place     Place     @relation(fields: [placeId], references: [id])
  placeId   String
  order     Int
  note      String?
  arrivedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
