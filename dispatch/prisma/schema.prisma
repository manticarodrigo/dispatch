generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  seats     Seat[]
  addresses Address[]
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Seat {
  id        String     @id @default(uuid())
  name      String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  location  Location[]
  route     Route[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Location {
  id        String   @id @default(uuid())
  lat       Float
  lng       Float
  seat      Seat     @relation(fields: [seatId], references: [id])
  seatId    String
  createdAt DateTime @default(now())
}

model Address {
  id        String   @id @default(uuid())
  name      String
  lat       Float
  lng       Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  stop      Stop[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Route {
  id        String   @id @default(uuid())
  seat      Seat     @relation(fields: [seatId], references: [id])
  seatId    String
  stops     Stop[]
  startAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stop {
  id        String   @id @default(uuid())
  route     Route    @relation(fields: [routeId], references: [id])
  routeId   String
  address   Address  @relation(fields: [addressId], references: [id])
  addressId String
  arrivedAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
