name: prod

on:
  push:
    branches:
      - master

jobs:
  infra:
    name: Run terraform plan and apply
    env:
      TF_VAR_env: prod
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_aws_region: us-east-1
      TF_VAR_datomic_ami: ${{ secrets.DATOMIC_AMI }}
      TF_VAR_datomic_license: ${{ secrets.DATOMIC_LICENSE }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.8
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Initialize terraform
        run: |
          cd dispatch/infra/terraform
          terraform init -input=false -backend-config="key=prod"
      - name: Plan terraform
        id: plan
        continue-on-error: true
        run: |
          cd dispatch/infra/terraform
          terraform plan -input=false -no-color -out=proposed.plan \
          && terraform show -no-color proposed.plan
      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
      - name: Reformat plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
      - name: Put plan in env var
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Apply terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        run: |
          cd dispatch/infra/terraform
          terraform apply \
            -input=false \
            -no-color \
            proposed.plan
  site:
    name: Build and upload UI
    needs: [infra]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Restore maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('dispatch/ui/shadow-cljs.edn') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: dispatch/ui/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('dispatch/ui/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Restore shadow-cljs compiler cache
        uses: actions/cache@v3
        with:
          path: dispatch/ui/.shadow-cljs
          key: ${{ runner.os }}-shadow-cljs-${{ hashFiles('dispatch/ui/shadow-cljs.edn') }}
          restore-keys: |
            ${{ runner.os }}-shadow-cljs-
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Build project
        run: cd dispatch/ui && yarn install && yarn release
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to S3 bucket
        run: aws s3 sync dispatch/ui/public/ s3://dispatch-prod-site --delete
      - name: Invalidate CloudFront
        uses: chetan/invalidate-cloudfront-action@v2.4
        env:
          DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/index.html"
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
