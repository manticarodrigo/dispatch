name: prod

on:
  push:
    branches:
      - master

jobs:
  infra-base:
    name: apply base infra
    env:
      TF_VAR_env: prod
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_aws_region: us-east-1
    runs-on: ubuntu-20.04
    outputs:
      ui_bucket_name: ${{ steps.output.outputs.ui_bucket_name }}
      ui_distribution_id: ${{ steps.output.outputs.ui_distribution_id }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.8
          terraform_wrapper: false
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install api deps
        run: |
          cd dispatch/api
          yarn install
      - name: Initialize terraform
        run: |
          cd dispatch/infra/base
          terraform init -input=false -backend-config="key=prod"
      - name: Plan terraform
        id: plan
        run: |
          cd dispatch/infra/base
          terraform plan -input=false -no-color -out=proposed.plan \
          && terraform show -no-color proposed.plan
      - name: Apply terraform
        if: steps.plan.outcome == 'success'
        id: apply
        run: |
          cd dispatch/infra/base
          terraform apply \
            -input=false \
            -no-color \
            proposed.plan
      - name: Store output
        if: steps.plan.outcome == 'success'
        id: output
        run: |
          cd dispatch/infra/base
          echo ::set-output name=ui_bucket_name::$(terraform output ui_bucket_name | tr -d '"')
          echo ::set-output name=ui_distribution_id::$(terraform output ui_distribution_id | tr -d '"')
  deploy-ui:
    name: build and upload ui
    needs: [infra-base]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Restore maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('dispatch/ui/shadow-cljs.edn') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: dispatch/ui/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('dispatch/ui/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Restore shadow-cljs compiler cache
        uses: actions/cache@v3
        with:
          path: dispatch/ui/.shadow-cljs
          key: ${{ runner.os }}-shadow-cljs-${{ hashFiles('dispatch/ui/shadow-cljs.edn') }}
          restore-keys: |
            ${{ runner.os }}-shadow-cljs-
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Build project
        run: cd dispatch/ui && yarn install && yarn release
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to S3 bucket
        run: aws s3 sync dispatch/ui/public/ s3://${{ needs.infra-base.outputs.ui_bucket_name }} --delete
      - name: Invalidate CloudFront
        uses: chetan/invalidate-cloudfront-action@v2.4
        env:
          DISTRIBUTION: ${{ needs.infra-base.outputs.ui_distribution_id }}
          PATHS: "/index.html"
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
