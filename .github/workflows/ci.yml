name: ci

on:
  push:
    branches:
      - master
      - develop

jobs:
  deploy:
    name: deploy infra
    env:
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_aws_region: us-east-1
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Restore maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('dispatch/shadow-cljs.edn') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: dispatch/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('dispatch/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Restore shadow-cljs compiler cache
        uses: actions/cache@v3
        with:
          path: dispatch/.shadow-cljs
          key: ${{ runner.os }}-shadow-cljs-${{ hashFiles('dispatch/shadow-cljs.edn') }}
          restore-keys: |
            ${{ runner.os }}-shadow-cljs-
      - name: Start docker
        run: cd dispatch && docker-compose up -d
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.1
          terraform_wrapper: false
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Initialize terraform
        run: |
          cd infra
          if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
            terraform init -input=false -migrate-state
            terraform workspace new prod
            terraform workspace select prod
          fi
          if [[ "${{github.base_ref}}" == "develop" || "${{github.ref}}" == "refs/heads/develop" ]]; then
            terraform init -input=false -migrate-state
            terraform workspace new dev
            terraform workspace select dev
          fi
      - name: Plan terraform
        id: plan
        run: |
          cd infra
          terraform plan -input=false -no-color -out=proposed.plan \
          && terraform show -no-color proposed.plan
      - name: Apply terraform
        if: steps.plan.outcome == 'success'
        id: apply
        run: |
          cd infra
          terraform apply \
            -input=false \
            -no-color \
            proposed.plan
