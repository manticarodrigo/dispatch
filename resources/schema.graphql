scalar Date
scalar JSON

type Query {
  user: User
  stripe: Stripe
}

type Mutation {
  register(email: String!, organization: String!): String
  login(email: String, phone: String): String
  loginConfirm(code: Int!): String
  createAgent(name: String!, phone: String!): Agent
  createLocation(position: LocationPosition!, createdAt: Date): Location
  createPlace(
    externalId: ID
    name: String!
    phone: String
    email: String
    description: String!
    lat: Float!
    lng: Float!
  ): Place
  createTask(agentId: ID!, startAt: Date!, placeIds: [ID]!, route: JSON!): Task
  createArrival(stopId: ID!, note: String, status: StopStatus): Stop
  createShipment(shipment: ShipmentInput!): Shipment
  createShipments(shipments: [ShipmentInput]!): Organization
  archiveShipments(shipmentIds: [ID]!): Organization
  unarchiveShipments(shipmentIds: [ID]!): Organization
  createVehicle(name: String!, weight: Float, volume: Float): Vehicle
  createVehicles(vehicles: [VehicleInput]!): Organization
  archiveVehicles(vehicleIds: [ID]!): Organization
  createPlan(
    depotId: ID
    startAt: Date
    endAt: Date
    breaks: JSON
    vehicleIds: [ID]!
    shipmentIds: [ID]!
    result: JSON
  ): Plan
  optimizePlan(planId: ID!): Plan
  optimizeTask(taskId: ID!): Task
  detachPaymentMethod(paymentMethodId: ID!): Boolean
  createPlanTasks(planId: ID!, assignments: [AssignmentInput]): Plan
}

type User {
  id: ID!
  email: String
  phone: String
  scope: String!
  organization: Organization
  agent: Agent
}

type Organization {
  id: ID!
  name: String!
  agents: [Agent]
  agent(agentId: ID!, filters: TaskFilters): Agent
  places: [Place]
  place(placeId: ID!, filters: TaskFilters): Place
  tasks(filters: TaskFilters): [Task]
  task(taskId: ID): Task
  stop(stopId: ID!): Stop
  shipments(filters: ShipmentFilters): [Shipment]
  vehicles: [Vehicle]
  plans: [Plan]
  plan(planId: ID!): Plan
}

type Agent {
  id: ID!
  name: String!
  user: User
  location: Location
  places: [Place]
  place(placeId: ID!, filters: TaskFilters): Place
  tasks(filters: TaskFilters): [Task]
  task(taskId: ID!): Task
  stop(stopId: ID!): Stop
}

type Location {
  id: ID!
  position: JSON!
  createdAt: Date!
}

input LocationPosition {
  latitude: Float!
  longitude: Float!
  accuracy: Float
  altitude: Float
  altitudeAccuracy: Float
  heading: Float
  simulated: Boolean
  speed: Float
  timestamp: Float
}

type Place {
  id: ID!
  name: String!
  phone: String
  email: String
  description: String!
  lat: Float!
  lng: Float!
  tasks: [Task]
}

type Stop {
  id: ID!
  order: Int!
  note: String
  place: Place!
  pickups: [Shipment]
  deliveries: [Shipment]
  status: StopStatus
  finishedAt: Date
}

enum StopStatus {
  COMPLETE
  INCOMPLETE
}

type Task {
  id: ID!
  agent: Agent!
  startAt: Date!
  stops: [Stop]!
  route: JSON!
}

input TaskFilters {
  start: Date
  end: Date
  status: TaskStatus
}

enum TaskStatus {
  INCOMPLETE
  COMPLETE
}

type Stripe {
  setupIntent: JSON
  paymentMethods: JSON
}

type Shipment {
  id: ID!
  place: Place!
  weight: Float
  volume: Float
  duration: Int
  windows: [ShipmentWindow]
}

type ShipmentWindow {
  id: ID!
  startAt: Date!
  endAt: Date!
}

input ShipmentInput {
  externalId: ID
  externalPlaceId: ID
  placeId: ID
  weight: Float
  volume: Float
  duration: Int
  windows: [WindowInput]
}

input ShipmentFilters {
  start: Date
  end: Date
  status: ShipmentStatus
}

enum ShipmentStatus {
  ASSIGNED
  ARCHIVED
}

input WindowInput {
  startAt: Date!
  endAt: Date!
}

type Vehicle {
  id: ID!
  name: String!
  weight: Float
  volume: Float
}

input VehicleInput {
  name: String!
  weight: Float
  volume: Float
}

type Plan {
  id: ID!
  depot: Place
  startAt: Date!
  endAt: Date!
  breaks: JSON
  result: JSON
  vehicles: [PlanVehicle]!
  shipments: [PlanShipment]!
}

type PlanVehicle {
  id: ID!
  order: Int!
  vehicle: Vehicle!
}

type PlanShipment {
  id: ID!
  order: Int!
  shipment: Shipment!
}

input AssignmentInput {
  agentId: ID!
  routeIndex: Int!
}
