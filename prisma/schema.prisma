generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String         @id @unique @default(uuid())
  email         String?        @unique
  phone         String?        @unique
  password      String?
  agent         Agent?
  organization  Organization?
  verifications Verification[]
  sessions      Session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Organization {
  id        String     @id @unique @default(uuid())
  name      String
  admin     User       @relation(fields: [adminId], references: [id])
  adminId   String     @unique
  stripe    Stripe?    @relation(fields: [stripeId], references: [id])
  stripeId  String?    @unique
  agents    Agent[]
  places    Place[]
  tasks     Task[]
  shipments Shipment[]
  vehicles  Vehicle[]
  plans     Plan[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Stripe {
  id           String        @id @unique @default(uuid())
  customerId   String        @unique
  organization Organization?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Verification {
  id        String   @id @unique @default(uuid())
  code      Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Agent {
  id             String       @id @unique @default(uuid())
  externalId     String?
  name           String
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?      @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  locations      Location[]
  tasks          Task[]
  places         Place[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([externalId, organizationId])
}

model Location {
  id        String   @id @unique @default(uuid())
  position  Json
  agent     Agent    @relation(fields: [agentId], references: [id])
  agentId   String
  createdAt DateTime @default(now())
}

model Place {
  id             String       @id @unique @default(uuid())
  externalId     String?
  name           String
  phone          String?
  email          String?
  description    String
  lat            Float
  lng            Float
  agent          Agent?       @relation(fields: [agentId], references: [id])
  agentId        String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  stops          Stop[]
  shipments      Shipment[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  plans          Plan[]

  @@unique([externalId, organizationId])
}

model Task {
  id             String       @id @unique @default(uuid())
  stops          Stop[]
  route          Json
  agent          Agent        @relation(fields: [agentId], references: [id])
  agentId        String
  vehicle        Vehicle?     @relation(fields: [vehicleId], references: [id])
  vehicleId      String?
  plan           Plan?        @relation(fields: [planId], references: [id])
  planId         String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  startAt        DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Stop {
  id         String      @id @unique @default(uuid())
  order      Int
  note       String?
  break      Boolean?
  duration   Int?
  pickups    Shipment[]  @relation("ShipmentPickup")
  deliveries Shipment[]  @relation("ShipmentDelivery")
  place      Place?      @relation(fields: [placeId], references: [id])
  placeId    String?
  task       Task        @relation(fields: [taskId], references: [id])
  taskId     String
  status     StopStatus?
  finishedAt DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum StopStatus {
  COMPLETE
  INCOMPLETE
}

model Vehicle {
  id             String        @id @unique @default(uuid())
  externalId     String?
  name           String?
  volume         Float?
  weight         Float?
  tasks          Task[]
  plans          PlanVehicle[]
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  archived       Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([externalId, organizationId])
}

model Shipment {
  id             String           @id @unique @default(uuid())
  externalId     String?
  volume         Float?
  weight         Float?
  duration       Int?
  windows        ShipmentWindow[]
  pickup         Stop?            @relation("ShipmentPickup", fields: [pickupId], references: [id])
  pickupId       String?
  delivery       Stop?            @relation("ShipmentDelivery", fields: [deliveryId], references: [id])
  deliveryId     String?
  place          Place            @relation(fields: [placeId], references: [id])
  placeId        String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  plans          PlanShipment[]
  archived       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([externalId, organizationId])
}

model ShipmentWindow {
  id         String   @id @unique @default(uuid())
  shipment   Shipment @relation(fields: [shipmentId], references: [id])
  shipmentId String
  startAt    DateTime
  endAt      DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Plan {
  id             String         @id @unique @default(uuid())
  startAt        DateTime
  endAt          DateTime
  breaks         Json?
  vehicles       PlanVehicle[]
  shipments      PlanShipment[]
  tasks          Task[]
  depot          Place?         @relation(fields: [depotId], references: [id])
  depotId        String?
  result         Json?
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model PlanVehicle {
  id        String   @id @unique @default(uuid())
  order     Int
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlanShipment {
  id         String   @id @unique @default(uuid())
  order      Int
  plan       Plan     @relation(fields: [planId], references: [id])
  planId     String
  shipment   Shipment @relation(fields: [shipmentId], references: [id])
  shipmentId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
